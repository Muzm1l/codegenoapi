// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	JwtScopes         = "jwt.Scopes"
	Nimbus_authScopes = "nimbus_auth.Scopes"
)

// Defines values for TaskUpdateRequestStatus.
const (
	TaskUpdateRequestStatusDONE       TaskUpdateRequestStatus = "DONE"
	TaskUpdateRequestStatusINPROGRESS TaskUpdateRequestStatus = "IN_PROGRESS"
	TaskUpdateRequestStatusTODO       TaskUpdateRequestStatus = "TO_DO"
)

// Defines values for TaskResponseStatus.
const (
	TaskResponseStatusDONE       TaskResponseStatus = "DONE"
	TaskResponseStatusINPROGRESS TaskResponseStatus = "IN_PROGRESS"
	TaskResponseStatusTODO       TaskResponseStatus = "TO_DO"
)

// Defines values for FindNimbusFilesByStatusParamsStatus.
const (
	Available FindNimbusFilesByStatusParamsStatus = "available"
	Pending   FindNimbusFilesByStatusParamsStatus = "pending"
	Sold      FindNimbusFilesByStatusParamsStatus = "sold"
)

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// File defines model for File.
type File struct {
	// CreatedAt Time when the file object was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// FileName Name of file
	FileName *string `json:"fileName,omitempty"`

	// FileSize Size of the file in bytes
	FileSize *int `json:"fileSize,omitempty"`

	// FileURI URI of the file
	FileURI *string `json:"fileURI"`

	// Id Unique id of the file object
	Id *int `json:"id,omitempty"`

	// Metadata Optional metadata associated with the file (JSON format)
	Metadata *map[string]interface{} `json:"metadata"`
}

// TaskUpdateRequest defines model for Task_update_request.
type TaskUpdateRequest struct {
	// Status Current status of task
	Status *TaskUpdateRequestStatus `json:"status,omitempty"`
}

// TaskUpdateRequestStatus Current status of task
type TaskUpdateRequestStatus string

// InlineResponse200 defines model for inlineResponse200.
type InlineResponse200 struct {
	// TaskID ID of the task from queue
	TaskID *string `json:"taskID,omitempty"`
}

// QueueNameRequest defines model for queueNameRequest.
type QueueNameRequest struct {
	// QueueName Name of the queue
	QueueName *string `json:"queueName,omitempty"`
}

// QueueResponse defines model for queueResponse.
type QueueResponse struct {
	// CreatedAt Task creation time-date
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id Unique id of the queue
	Id *int64 `json:"id,omitempty"`

	// QueueName Name of the queue
	QueueName *string `json:"queueName,omitempty"`
}

// TaskAddToqueueRequest defines model for taskAddToqueueRequest.
type TaskAddToqueueRequest struct {
	// Payload data regarding task
	Payload *string `json:"payload,omitempty"`

	// QueueName queuename to which task belongs
	QueueName *string `json:"queueName,omitempty"`
}

// TaskResponse defines model for taskResponse.
type TaskResponse struct {
	// CompletedAt task completion time-date
	CompletedAt *time.Time `json:"completedAt,omitempty"`

	// CreatedAt Task creation time-date
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id Unique ID of the task
	Id *int64 `json:"id,omitempty"`

	// Payload data regarding task
	Payload *string `json:"payload,omitempty"`

	// QueueId queueID to which task belongs
	QueueId *int64 `json:"queueId,omitempty"`

	// StartedAt task starting time
	StartedAt *time.Time `json:"startedAt,omitempty"`

	// Status Current status of task
	Status *TaskResponseStatus `json:"status,omitempty"`
}

// TaskResponseStatus Current status of task
type TaskResponseStatus string

// TaskStatus defines model for taskStatus.
type TaskStatus struct {
	// Status Current status of task
	Status *string `json:"status,omitempty"`
}

// FindNimbusFilesByStatusParams defines parameters for FindNimbusFilesByStatus.
type FindNimbusFilesByStatusParams struct {
	// Status Status values that need to be considered for filter
	Status *FindNimbusFilesByStatusParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// FindNimbusFilesByStatusParamsStatus defines parameters for FindNimbusFilesByStatus.
type FindNimbusFilesByStatusParamsStatus string

// FindNimbusFilesByTagsParams defines parameters for FindNimbusFilesByTags.
type FindNimbusFilesByTagsParams struct {
	// Tags Tags to filter by
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`
}

// DeleteNimmbusFileParams defines parameters for DeleteNimmbusFile.
type DeleteNimmbusFileParams struct {
	ApiKey *string `json:"api_key,omitempty"`
}

// UpdateNimbusFileWithFormParams defines parameters for UpdateNimbusFileWithForm.
type UpdateNimbusFileWithFormParams struct {
	// Name Name of file that needs to be updated
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Status Status of file that needs to be updated
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// UploadNimbusbusFileParams defines parameters for UploadNimbusbusFile.
type UploadNimbusbusFileParams struct {
	// AdditionalMetadata Additional Metadata
	AdditionalMetadata *string `form:"additionalMetadata,omitempty" json:"additionalMetadata,omitempty"`
}

// AddNimbusFileJSONRequestBody defines body for AddNimbusFile for application/json ContentType.
type AddNimbusFileJSONRequestBody = File

// UpdateNimbusFileJSONRequestBody defines body for UpdateNimbusFile for application/json ContentType.
type UpdateNimbusFileJSONRequestBody = File

// CreateNimbusQueueJSONRequestBody defines body for CreateNimbusQueue for application/json ContentType.
type CreateNimbusQueueJSONRequestBody = QueueNameRequest

// RenameNimbusQueueJSONRequestBody defines body for RenameNimbusQueue for application/json ContentType.
type RenameNimbusQueueJSONRequestBody = QueueNameRequest

// CreateNimbusTaskJSONRequestBody defines body for CreateNimbusTask for application/json ContentType.
type CreateNimbusTaskJSONRequestBody = TaskAddToqueueRequest

// UpdateNimbusTaskJSONRequestBody defines body for UpdateNimbusTask for application/json ContentType.
type UpdateNimbusTaskJSONRequestBody = TaskUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new file to the store
	// (POST /file)
	AddNimbusFile(w http.ResponseWriter, r *http.Request)
	// Update an existing file
	// (PUT /file)
	UpdateNimbusFile(w http.ResponseWriter, r *http.Request)
	// Finds Files by status
	// (GET /file/findByStatus)
	FindNimbusFilesByStatus(w http.ResponseWriter, r *http.Request, params FindNimbusFilesByStatusParams)
	// Finds Files by tags
	// (GET /file/findByTags)
	FindNimbusFilesByTags(w http.ResponseWriter, r *http.Request, params FindNimbusFilesByTagsParams)
	// Deletes a file
	// (DELETE /file/{fileId})
	DeleteNimmbusFile(w http.ResponseWriter, r *http.Request, fileId int64, params DeleteNimmbusFileParams)
	// Find file by ID
	// (GET /file/{fileId})
	GetNimbusFileById(w http.ResponseWriter, r *http.Request, fileId int64)
	// Updates a file in the store with form data
	// (POST /file/{fileId})
	UpdateNimbusFileWithForm(w http.ResponseWriter, r *http.Request, fileId int64, params UpdateNimbusFileWithFormParams)
	// uploads an image
	// (POST /file/{fileId}/uploadImage)
	UploadNimbusbusFile(w http.ResponseWriter, r *http.Request, fileId int64, params UploadNimbusbusFileParams)
	// Get all queues
	// (GET /queue)
	GetNimbusAllQueues(w http.ResponseWriter, r *http.Request)
	// Create a new queue
	// (POST /queue)
	CreateNimbusQueue(w http.ResponseWriter, r *http.Request)
	// Pop a task
	// (GET /queue/pop/{queueName})
	PopNimbusTask(w http.ResponseWriter, r *http.Request, queueName string)
	// Delete a queue
	// (DELETE /queue/{queueId})
	DeleteNimbusQueue(w http.ResponseWriter, r *http.Request, queueId int64)
	// Rename a queue
	// (PUT /queue/{queueId})
	RenameNimbusQueue(w http.ResponseWriter, r *http.Request, queueId int64)
	// Create a new task
	// (POST /task)
	CreateNimbusTask(w http.ResponseWriter, r *http.Request)
	// Get all tasks from a queue
	// (GET /task/{queueName}/fromqueue)
	GetAllNimbusTasks(w http.ResponseWriter, r *http.Request, queueName string)
	// Delete task
	// (DELETE /task/{taskId})
	DeleteNimbusTask(w http.ResponseWriter, r *http.Request, taskId int64)
	// Get task by ID
	// (GET /task/{taskId})
	GetNimbusTaskById(w http.ResponseWriter, r *http.Request, taskId int64)
	// Update task
	// (PUT /task/{taskId})
	UpdateNimbusTask(w http.ResponseWriter, r *http.Request, taskId int64)
	// Get task status
	// (GET /task/{taskId}/status)
	GetNimbusTaskStatus(w http.ResponseWriter, r *http.Request, taskId int64)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Add a new file to the store
// (POST /file)
func (_ Unimplemented) AddNimbusFile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing file
// (PUT /file)
func (_ Unimplemented) UpdateNimbusFile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Finds Files by status
// (GET /file/findByStatus)
func (_ Unimplemented) FindNimbusFilesByStatus(w http.ResponseWriter, r *http.Request, params FindNimbusFilesByStatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Finds Files by tags
// (GET /file/findByTags)
func (_ Unimplemented) FindNimbusFilesByTags(w http.ResponseWriter, r *http.Request, params FindNimbusFilesByTagsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a file
// (DELETE /file/{fileId})
func (_ Unimplemented) DeleteNimmbusFile(w http.ResponseWriter, r *http.Request, fileId int64, params DeleteNimmbusFileParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find file by ID
// (GET /file/{fileId})
func (_ Unimplemented) GetNimbusFileById(w http.ResponseWriter, r *http.Request, fileId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Updates a file in the store with form data
// (POST /file/{fileId})
func (_ Unimplemented) UpdateNimbusFileWithForm(w http.ResponseWriter, r *http.Request, fileId int64, params UpdateNimbusFileWithFormParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// uploads an image
// (POST /file/{fileId}/uploadImage)
func (_ Unimplemented) UploadNimbusbusFile(w http.ResponseWriter, r *http.Request, fileId int64, params UploadNimbusbusFileParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all queues
// (GET /queue)
func (_ Unimplemented) GetNimbusAllQueues(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new queue
// (POST /queue)
func (_ Unimplemented) CreateNimbusQueue(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Pop a task
// (GET /queue/pop/{queueName})
func (_ Unimplemented) PopNimbusTask(w http.ResponseWriter, r *http.Request, queueName string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a queue
// (DELETE /queue/{queueId})
func (_ Unimplemented) DeleteNimbusQueue(w http.ResponseWriter, r *http.Request, queueId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Rename a queue
// (PUT /queue/{queueId})
func (_ Unimplemented) RenameNimbusQueue(w http.ResponseWriter, r *http.Request, queueId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new task
// (POST /task)
func (_ Unimplemented) CreateNimbusTask(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all tasks from a queue
// (GET /task/{queueName}/fromqueue)
func (_ Unimplemented) GetAllNimbusTasks(w http.ResponseWriter, r *http.Request, queueName string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete task
// (DELETE /task/{taskId})
func (_ Unimplemented) DeleteNimbusTask(w http.ResponseWriter, r *http.Request, taskId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get task by ID
// (GET /task/{taskId})
func (_ Unimplemented) GetNimbusTaskById(w http.ResponseWriter, r *http.Request, taskId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update task
// (PUT /task/{taskId})
func (_ Unimplemented) UpdateNimbusTask(w http.ResponseWriter, r *http.Request, taskId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get task status
// (GET /task/{taskId}/status)
func (_ Unimplemented) GetNimbusTaskStatus(w http.ResponseWriter, r *http.Request, taskId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AddNimbusFile operation middleware
func (siw *ServerInterfaceWrapper) AddNimbusFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Nimbus_authScopes, []string{"write:files", "read:files"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNimbusFile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateNimbusFile operation middleware
func (siw *ServerInterfaceWrapper) UpdateNimbusFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Nimbus_authScopes, []string{"write:files", "read:files"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateNimbusFile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FindNimbusFilesByStatus operation middleware
func (siw *ServerInterfaceWrapper) FindNimbusFilesByStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Nimbus_authScopes, []string{"write:files", "read:files"})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindNimbusFilesByStatusParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindNimbusFilesByStatus(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FindNimbusFilesByTags operation middleware
func (siw *ServerInterfaceWrapper) FindNimbusFilesByTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Nimbus_authScopes, []string{"write:files", "read:files"})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindNimbusFilesByTagsParams

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindNimbusFilesByTags(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteNimmbusFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteNimmbusFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "fileId", runtime.ParamLocationPath, chi.URLParam(r, "fileId"), &fileId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Nimbus_authScopes, []string{"write:files", "read:files"})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteNimmbusFileParams

	headers := r.Header

	// ------------- Optional header parameter "api_key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("api_key")]; found {
		var ApiKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "api_key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, valueList[0], &ApiKey)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "api_key", Err: err})
			return
		}

		params.ApiKey = &ApiKey

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNimmbusFile(w, r, fileId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNimbusFileById operation middleware
func (siw *ServerInterfaceWrapper) GetNimbusFileById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "fileId", runtime.ParamLocationPath, chi.URLParam(r, "fileId"), &fileId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	ctx = context.WithValue(ctx, Nimbus_authScopes, []string{"write:files", "read:files"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNimbusFileById(w, r, fileId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateNimbusFileWithForm operation middleware
func (siw *ServerInterfaceWrapper) UpdateNimbusFileWithForm(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "fileId", runtime.ParamLocationPath, chi.URLParam(r, "fileId"), &fileId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Nimbus_authScopes, []string{"write:files", "read:files"})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateNimbusFileWithFormParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateNimbusFileWithForm(w, r, fileId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UploadNimbusbusFile operation middleware
func (siw *ServerInterfaceWrapper) UploadNimbusbusFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "fileId", runtime.ParamLocationPath, chi.URLParam(r, "fileId"), &fileId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Nimbus_authScopes, []string{"write:files", "read:files"})

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadNimbusbusFileParams

	// ------------- Optional query parameter "additionalMetadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "additionalMetadata", r.URL.Query(), &params.AdditionalMetadata)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "additionalMetadata", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadNimbusbusFile(w, r, fileId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNimbusAllQueues operation middleware
func (siw *ServerInterfaceWrapper) GetNimbusAllQueues(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNimbusAllQueues(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateNimbusQueue operation middleware
func (siw *ServerInterfaceWrapper) CreateNimbusQueue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNimbusQueue(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PopNimbusTask operation middleware
func (siw *ServerInterfaceWrapper) PopNimbusTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "queueName" -------------
	var queueName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "queueName", runtime.ParamLocationPath, chi.URLParam(r, "queueName"), &queueName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "queueName", Err: err})
		return
	}

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PopNimbusTask(w, r, queueName)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteNimbusQueue operation middleware
func (siw *ServerInterfaceWrapper) DeleteNimbusQueue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "queueId" -------------
	var queueId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "queueId", runtime.ParamLocationPath, chi.URLParam(r, "queueId"), &queueId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "queueId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNimbusQueue(w, r, queueId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RenameNimbusQueue operation middleware
func (siw *ServerInterfaceWrapper) RenameNimbusQueue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "queueId" -------------
	var queueId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "queueId", runtime.ParamLocationPath, chi.URLParam(r, "queueId"), &queueId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "queueId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RenameNimbusQueue(w, r, queueId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateNimbusTask operation middleware
func (siw *ServerInterfaceWrapper) CreateNimbusTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNimbusTask(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllNimbusTasks operation middleware
func (siw *ServerInterfaceWrapper) GetAllNimbusTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "queueName" -------------
	var queueName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "queueName", runtime.ParamLocationPath, chi.URLParam(r, "queueName"), &queueName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "queueName", Err: err})
		return
	}

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllNimbusTasks(w, r, queueName)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteNimbusTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteNimbusTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, chi.URLParam(r, "taskId"), &taskId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNimbusTask(w, r, taskId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNimbusTaskById operation middleware
func (siw *ServerInterfaceWrapper) GetNimbusTaskById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, chi.URLParam(r, "taskId"), &taskId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNimbusTaskById(w, r, taskId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateNimbusTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateNimbusTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, chi.URLParam(r, "taskId"), &taskId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateNimbusTask(w, r, taskId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNimbusTaskStatus operation middleware
func (siw *ServerInterfaceWrapper) GetNimbusTaskStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, chi.URLParam(r, "taskId"), &taskId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNimbusTaskStatus(w, r, taskId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/file", wrapper.AddNimbusFile)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/file", wrapper.UpdateNimbusFile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/file/findByStatus", wrapper.FindNimbusFilesByStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/file/findByTags", wrapper.FindNimbusFilesByTags)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/file/{fileId}", wrapper.DeleteNimmbusFile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/file/{fileId}", wrapper.GetNimbusFileById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/file/{fileId}", wrapper.UpdateNimbusFileWithForm)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/file/{fileId}/uploadImage", wrapper.UploadNimbusbusFile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/queue", wrapper.GetNimbusAllQueues)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/queue", wrapper.CreateNimbusQueue)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/queue/pop/{queueName}", wrapper.PopNimbusTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/queue/{queueId}", wrapper.DeleteNimbusQueue)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/queue/{queueId}", wrapper.RenameNimbusQueue)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/task", wrapper.CreateNimbusTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/task/{queueName}/fromqueue", wrapper.GetAllNimbusTasks)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/task/{taskId}", wrapper.DeleteNimbusTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/task/{taskId}", wrapper.GetNimbusTaskById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/task/{taskId}", wrapper.UpdateNimbusTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/task/{taskId}/status", wrapper.GetNimbusTaskStatus)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbbXPbNhL+KxjkPrQzlKg4aa+jb+65SdW72mnsXOcuzXggcimhIQEWAK2oHv33m12A",
	"LxIpW07tvPT6xaaIt8Xug2d3AfCaJ7ootQLlLJ9ec5ssoRD0eFzKl2BLrSzgT3gnijKnx0SnwKeTiBdg",
	"rVgAnzZPEXfrEl/Qv03ES6NLME6CbVte80ybQjg+5VK5J0dtK6kcLMBgw6bv67rQOiPVAsv8i15BU8L1",
	"/FdIHI/4uyLHikoU+PrRoxQyUeWO6j6TeW9mBoSD9BhFO5pMJqPJ49HRk4vJ0+lXX08nf/8vj3gmczj1",
	"3TWP/u25/B349Gv/49XLWaiBTxGXadCYE6lwgk+vN33ttKNf8xRsYmTppFZ8yi9kAWy1BMXcEhh2y/wc",
	"2UpYFhqiHLViU+Fg5GTRMUmrv3YOu+PgW6YzGmFfSz/P3Zb4Fls28knF5msHdtC6jYp2u3n1ctbthUdc",
	"VXku5mgfZyoYkAlV2+tGyd8qYDLdEqmBxRDcGsPsdHVGDyJndRUmrNWJRI2zlXTLtv8vfjg/O2XeBl/u",
	"Fz2I0cfrJuIXwr69rEo036WB3yqwbgej1glXWcTE5PJk0l9jdfnuPP5RGQPKMV9OehH2LY84qKrg09f8",
	"4uzy5IxHfHZ6+eLl2fOX352f84ifnJ1+x99Et641NITKpYKaNI4mkx3JcbzZCZKDf+iJXlfYFX12UpsR",
	"a7DM6IL9VkE1ANEhuagqIvtlq9DtgZsa+1cEjn7XMffx5+0sE+iiI1fn+U7EgQqjcqkVQ0IYIbYOpoqD",
	"Fletly6tf/10cJ3dv6YREsdpeqGDyofWTCnWuRYpnzZP27othZOgXF+zTcNdYYkIDCyESaVa1Eupp74b",
	"pktF6JiY02y1lMnSo3sOuVYLe/jk93ppfLoFZ4dDca8KZyk5PeuEuaWnlrmIaQaig47Eu+oi3YQa7wfl",
	"j7NKtrnrsEVyL6ibpXswNzvZi7gDZOvYedBEVE7CeV0dpsCP57Swv/Nm9CE/Gx7+uKO9VRpUBCSVkW59",
	"joG4H0eU8vItrPFRYv9LECkYDC88edXlTXeilP+ENQr864rMNAdhwDyrLfHDzxe4GmkEPg2lbfOlcyWG",
	"ziNfMFOZflaphE95og2MReWWl5WTuR2ngAH9pdNvQeFwShbzyl5iDYryc72iGciizGUiSRYs1Eb+Tkvt",
	"lcnDgHYaxyU467SBJ2O7EosFmLHUscYGcd0KSHBdes0YEOkUW/EpPbO1rgyjFxFfGemgLi10KrM1FWFg",
	"SvVEkugKSb9rCRzoyL+Cdw6MEvmJTgas/EyqlOnKsUIbYGKOj6c0fx7xqpnXNI5TndixgIXUKl0rUchk",
	"nOgi9sqKfeCU6QFSWkrLpCXu8D2zubCQMu2zgLMS1PGLGXsynjBbQiIzmZBWx+xiCexEOPFMzI1M2HzN",
	"jml8duIFwG4FK/UKTFblLDOigJU2b5lbCsdAYdBqmQVR5GBRYw4WxpOjUCkrhBILKBDkOmM+Jk6MtpZd",
	"CSN1ZZldWweFpdplLhyygB2zmWMWzBVYJvy8Ml2p1HecacMEKyR2JIRthYqYyHO9Qk5J4QpyXIMWKWxe",
	"yTxlNhEUZHvJdFrlwjCrM7cSBkbCjsQIx5QJMFEiDmk4O/5F/aJ+rsP3VlkRgoMlQjEQVuZrlmilIHER",
	"c0YoixOJaCihRL7+Hfz0KSRNZZaBX/q6MgnYiJVGX0niasEqJTMJKbuSsEK9EQipdS5UahNRAmlIYy9o",
	"HyPUwmdjIFxlwKszEaWYy1wiDUVMqiSvaADqya5VsjRahfUVMQMiJ9b15aXRCVgr1cJPgl4u9BUCXSVA",
	"SpkhvKRlV2AsGia4r66KVsCW4gqYSHWJaZBgKVi5UKNMGutQz0aLZNmxHFp3QQ7YsCyHd5KmsCYhcKEp",
	"G96M2X+C/hOtnJHzylGEhCLIAvXZAM/1UG6rxQIsuZ9kidqzdVNcKClkUkkCmzZYvRmB/JWviIyGy4xU",
	"8T3g2jbArC6AVRZwteRSvaV+F+BYcIdtItgKNP1FjdjrjoDPpfu+mjMDpbbSabN+80VNfQvpltWceMEz",
	"xShQRYwWyqj9l9TfzkRQr9vD3q3TeJ7reVwI68DE1iRxIaSKDQQEx7oEJUo5Xosi/xJV8og5MIU9y879",
	"opqyQHMI55E2C1GDjwamyjE6F+nQr/LAZCgvC3oZdamMRzwAj0/5ZPx4TCluEINP+ZPxZPyEY4zklkTL",
	"cRb2cUptB4KS4xThqWDlU/RgZfIznPr1vIbREtb14j3zWw8hAf9Wp2sfnyqHWQL55IZJ4l8tDlTvneHT",
	"3wxkfMofxe3mWhx21mLqmvzLTtRAi6MrqlRboqIw0kDqNxM2+MLH/aSFkG0/qIjnVYLkgWug0Rsa56kf",
	"eydnV1cilymTqqwo0Hp6dNSv9W+s4/kf3iXgX3fjID59fb0dV7wOnh11ZEkvIg0/3mzeRNxWRSHM+lbT",
	"O7Gw2FvdNOIoaD+Mp70Yhv7gnfTUQr3N12yW9hDka380EO0Iizz5J4LS7ITZCkWB1Nd9OhSW5cCUdj6y",
	"+Di42wOZAcxtIk9fcSZV+u26zUMWMADFH6vcyTKHOrO4EnkFlnzlHEKoUbuiRBeFYBZKYWij0icdtgdY",
	"DGNbuNpGBiRYDMAcGEu62LHflgQUNSqAlKIy9KHKyhQMpOSfMpk7SjDgXZnTCYDfDpUhJTXrNpmx9fAt",
	"vuo9+ykXV0L6DdU2Aey+K0FhKIStdZ4OJICYaK7JDWEcx9Fsfwj6EoPcw9ZAm50ZI9aUX4VhRk3atjPU",
	"wLqx77NuunC5N5AjcCwj0FDkVdvtFohfUPFtAMdO7oTrMXtlqdnjCP8e0d8nPjryAeH4duiTbLcAH+sg",
	"yj2m2Xx9GKyd73oAOXsOtwJM/k8R68TiYeEa7LEXrNf4d5ZuvIg5uIENXP+eiZrct9F1QqWnsuiEAjvI",
	"anCTidzWwNm/u9MacS+rWUm7V5to0C1K4ucwnWh4eAyr28G9FnoRQ1eWg7YMt6XbxfCNUKD45X6x4E1j",
	"W8t1YUCR4CA7vQRXGYXNMH/OYdjuz8G1pPLtmrR3I6P4DeI6QjU0yKdknQ8RDtoPFQ7uIqjZW339BhfN",
	"HyCXNis4GU4uQnZ6c77ws3TLZ0j0dwBNHXzZEH350+P0Y2IouulewUES73elyt+4OIANvceM9sSu9yPN",
	"QLx6x5jzkOz5XhOTmvi2skIfXaGEtCfYJ8Wea4yrMtcinRXhls4+gGMlD/C9jvAmQvTW+KTAfJymMtwJ",
	"+bG+NnIQWETTsNPubsA5ZC9BJw7cyDoDotjm5mb2c6mEWQ+cSW0ecjege6XsYC9wT9j3aLWYlcsiXFUb",
	"iP78xYN9CcpzcEzkub+eYPf7/uM8/6mu8mDa3L5icodNlq+GGOcczBUY9p0x2nilN6rrzbpWXHjRdW83",
	"bGrWdzq2deareLX9FGo8xJZZ7xLQgMJo/PpiXdjKCFfrNp+iIR9845XOj1/vrKRBo/Yg0SymuNRlfN2o",
	"f7N3cb3QJROdG17Nfa9h4LzQpUfNhT9dPyS52nYX7eWcmzzGrcnWQwbM/St1d4LHQER8qkmplrUbZ4eZ",
	"vTXPzea+DrdPbsydT+rcedi2TfLcIYX3tO/nlSA9DBUckil57rshVRoERc+OQ66hGkym6erbPgD44k8Z",
	"AB/HQ53CipHi6nNfr77NX5BsINlD1iBXEY/tPTTecnGB8vaHLcEBPQQmhi+3DhiBbjB+8Mhl6/rp5xW4",
	"7Dgy8okdbHQjlhjDkcMSA9/NQF5wnOctWOznHK4cdIKwDYz7OUl4LzC1t6xvpRtaQndlmy3D+7i1zzx9",
	"cNGXDgeGSP6ObthY3B8nvXcY7GX5nKKkB6GdQzzSe0EkGHIP4Rx62DDohZoNBxRs+LDhLwB8dAAgR2wt",
	"4j4GDr16dAMXdI8SPkUuuP/gaOhbudsvRTVq3LoUtfkLrdu3l26Nj4ILi+3Nl5YI/EvofA1xo0fbYrR9",
	"d5H+tJwWJvz5MFrv2k+DE+rHXA0f8fxLJyJfahs+BzC7n0zkdfn0m8k3k1iUMr56TOoP4/Q/0g06seFT",
	"jPpA4A4fcdz9u43OsZMdOCfqCdVsoH8IqcJgB4hVJy0fQiqilc2bzf8CAAD//xu+5rJ5QAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
